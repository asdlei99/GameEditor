////////////////////////////////////////////////////////////////////////////////
// Filename: bumpmap.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////

Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer MaterialBuffer
{
	float3 specularColorBuffer;
	float specularPowerBuffer;
    float bumpDepth;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};

static const float specPowerRange = 255.0f;

PS_GBUFFER_OUT PackGBuffer(float4 worldPos, float3 normal, float3 diffuseColor, float3 specularColor, float specularPower, float3 selfIlumColor)
{
	PS_GBUFFER_OUT output;
	
	output.normal = float4(normal * 0.5f + 0.5f, 1.0f);
	output.diffuse = float4(diffuseColor, 1.0f);

	specularPower = specularPower / specPowerRange;
	output.specular = float4(specularColor, specularPower);
	output.selfIlum = float4(selfIlumColor, 1.0f);
	
	return output;
}

PS_GBUFFER_OUT PackGBuffer(float3 normal, float3 diffuseColor, float3 specularColor, float specularPower, float3 selfIlumColor)
{
	PS_GBUFFER_OUT output;
	
	output.normal = float4(normal * 0.5f + 0.5f, 1.0f);
	output.diffuse = float4(diffuseColor, 1.0f);
	output.specular = float4(specularColor, specularPower);
	output.selfIlum = float4(selfIlumColor, 1.0f);
	
	return output;
}


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PS_GBUFFER_OUT BumpMapSpecularPixelShader(PixelInputType input) : SV_TARGET
{
	float3 normal;
    float3 diffuseColor = shaderTextures[0].Sample(SampleType, input.tex).rgb;
	float3 specularColor = shaderTextures[2].Sample(SampleType, input.tex).rgb;
	float specularPower = specularColorBuffer;
	float3 selfIlumColor = float3(0.0f, 0.0f, 0.0f);
	float4 bumpMap = shaderTextures[1].Sample(SampleType, input.tex);
	
	 // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;
	bumpMap *= bumpDepth;
	
	normal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
	normal = normalize(normal);
	
	return PackGBuffer(input.worldPos, normal, diffuseColor, specularColor, specularPower, selfIlumColor);
}
