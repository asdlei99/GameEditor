////////////////////////////////////////////////////////////////////////////////
// Filename: bumpmap.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////

Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer MaterialBuffer
{
	float specularPower;
    float4 specularColor;
    float bumpDepth;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 worldPos : TEXCOORD2;
};

#define POSITION 0
#define DIFFUSE 1
#define NORMAL 2
#define SPECULAR 3
#define VIEW_DIRECTION 4
#define SELF_ILUM 5

struct PixelOutputType
{
    float4 position : SV_Target0;
    float4 diffuse : SV_Target1;
	float4 normal : SV_Target2;
	float4 specular : SV_Target3;
	float4 viewDirection : SV_Target4;
	float4 selfIlum : SV_Target5;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 BumpMapSpecularPixelShader(PixelInputType input) : SV_TARGET
{
	PixelOutputType output;
	float4 bumpMap;
    float3 bumpNormal;
	
	output.position = float4(input.worldPos, 1.0f);
	output.normal.w = 1 - input.position.z / input.position.w; //inverted depth
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    output.diffuse = shaderTexture.Sample(SampleType, input.tex);
	
	 // Sample the pixel in the bump map.
    bumpMap = shaderTextures[1].Sample(SampleType, input.tex);

    // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;
	bumpMap *= bumpDepth;

    // Calculate the normal from the data in the bump map.
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
	
    // Normalize the resulting bump normal.
    bumpNormal = normalize(bumpNormal);
	
	output.normal.xyz = bumpNormal;

	output.specular.xyz = shaderTextures[2].Sample(SampleType, input.tex);
	output.specular.w = specularPower;
	output.viewDirection = input.viewDirection;
	
	output.selfIlum = float4(0.0f, 0.0f, 0.0f, 0.0f);

    return output;
}
