
cbuffer LightBuffer
{
    float4 ambientLightColor;
};

Texture2D positionTexture : register(t0);
Texture2D colorTexture : register(t1);
Texture2D normalTexture : register(t2);
Texture2D specularTexture : register(t3);
Texture2D viewDirectionTexture : register(t4);
Texture2D selfIluninationTexture : register(t5);

SamplerState SampleTypePoint : register(s0);

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 AmbientPixelShader(PixelInputType input) : SV_TARGET
{	
	float4 diffuseObjectColor = colorTexture.Sample(SampleTypePoint, input.tex);
	float3 normal = normalTexture.Sample(SampleTypePoint, input.tex).xyz;
	float3 selfIlumColor = selfIluninationTexture.Sample(SampleTypePoint, input.tex).xyz;
	
	float4 outputColor;
	
	outputColor.xyz = diffuseObjectColor * ambientLightColor;
	outputColor.xyz += selfIlumColor;
	outputColor.w = 1.0f;
    return outputColor;
}