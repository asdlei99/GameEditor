
Texture2D shaderTexture;
SamplerState SampleType;

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal: NORMAL0;
};

struct PS_GBUFFER_OUT
{
    float4 normal : SV_Target0;
    float4 diffuse : SV_Target1;
	float4 specular : SV_Target2;
	float4 selfIlum : SV_Target3;
};

static const float specPowerRange = 255.0f;

PS_GBUFFER_OUT PackGBuffer(float3 normal, float3 diffuseColor, float3 specularColor, float specularPower, float3 selfIlumColor)
{
	PS_GBUFFER_OUT output;
	
	output.normal = float4(normal * 0.5f + 0.5f, 1.0f);
	output.diffuse = float4(diffuseColor, 1.0f);

	specularPower = specularPower / specPowerRange;
	output.specular = float4(specularColor, specularPower);
	output.selfIlum = float4(selfIlumColor, 1.0f);
	
	return output;
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PS_GBUFFER_OUT TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float3 normal = input.normal;
    float3 diffuseColor = shaderTexture.Sample(SampleType, input.tex).rgb;
	float3 specularColor = float3(0.0f, 0.0f, 0.0f);
	float specularPower = 0.0f;
	float3 selfIlumColor = float3(0.0f, 0.0f, 0.0f);

    return PackGBuffer(normal, diffuseColor, specularColor, specularPower, selfIlumColor);
}
