////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer MaterialBuffer
{
    float3 specularColor;
	float specularPower;
};

//////////////
// TYPEDEFS //
//////////////

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
	float3 worldPos: TEXCOORD2;
};

#define POSITION 0
#define DIFFUSE 1
#define NORMAL 2
#define SPECULAR 3
#define VIEW_DIRECTION 4
#define SELF_ILUM 5

struct PixelOutputType
{
    float4 position : SV_Target0;
    float4 diffuse : SV_Target1;
	float4 normal : SV_Target2;
	float4 specular : SV_Target3;
	float4 viewDirection : SV_Target4;
	float4 selfIlum : SV_Target5;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelOutputType SpecularPixelShader(PixelInputType input) : SV_TARGET
{
	PixelOutputType output;
	
	output.position = float4(input.worldPos, 1.0f);
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    output.diffuse = shaderTexture.Sample(SampleType, input.tex);
	output.normal.xyz = input.normal;
	output.normal.w = 1 - input.position.z / input.position.w; //inverted depth
	output.specular.xyz = specularColor;
	output.specular.w = specularPower;
	output.viewDirection.xyz = input.viewDirection;
	output.selfIlum = float4(0.0f, 0.0f, 0.0f, 1.0f);
    return output;
}
